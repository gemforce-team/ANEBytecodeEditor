#pragma once

#include "enums/OPCodeArgumentType.hpp"
#include "utils/BidirectionalMap.hpp"
#include "utils/SmallTrivialVector.hpp"
#include <array>
#include <functional>
#include <stdint.h>
#include <string>
#include <vector>

enum class OPCode : uint8_t
{
    OP_raw                = 0x00, /// Used internally by RABCDAsm
    OP_bkpt               = 0x01,
    OP_nop                = 0x02,
    OP_throw              = 0x03,
    OP_getsuper           = 0x04,
    OP_setsuper           = 0x05,
    OP_dxns               = 0x06,
    OP_dxnslate           = 0x07,
    OP_kill               = 0x08,
    OP_label              = 0x09,
    OP_ifnlt              = 0x0C,
    OP_ifnle              = 0x0D,
    OP_ifngt              = 0x0E,
    OP_ifnge              = 0x0F,
    OP_jump               = 0x10,
    OP_iftrue             = 0x11,
    OP_iffalse            = 0x12,
    OP_ifeq               = 0x13,
    OP_ifne               = 0x14,
    OP_iflt               = 0x15,
    OP_ifle               = 0x16,
    OP_ifgt               = 0x17,
    OP_ifge               = 0x18,
    OP_ifstricteq         = 0x19,
    OP_ifstrictne         = 0x1A,
    OP_lookupswitch       = 0x1B,
    OP_pushwith           = 0x1C,
    OP_popscope           = 0x1D,
    OP_nextname           = 0x1E,
    OP_hasnext            = 0x1F,
    OP_pushnull           = 0x20,
    OP_pushundefined      = 0x21,
    OP_pushuninitialized  = 0x22,
    OP_nextvalue          = 0x23,
    OP_pushbyte           = 0x24,
    OP_pushshort          = 0x25,
    OP_pushtrue           = 0x26,
    OP_pushfalse          = 0x27,
    OP_pushnan            = 0x28,
    OP_pop                = 0x29,
    OP_dup                = 0x2A,
    OP_swap               = 0x2B,
    OP_pushstring         = 0x2C,
    OP_pushint            = 0x2D,
    OP_pushuint           = 0x2E,
    OP_pushdouble         = 0x2F,
    OP_pushscope          = 0x30,
    OP_pushnamespace      = 0x31,
    OP_hasnext2           = 0x32,
    OP_pushdecimal        = 0x33,
    OP_pushdnan           = 0x34,
    OP_li8                = 0x35,
    OP_li16               = 0x36,
    OP_li32               = 0x37,
    OP_lf32               = 0x38,
    OP_lf64               = 0x39,
    OP_si8                = 0x3A,
    OP_si16               = 0x3B,
    OP_si32               = 0x3C,
    OP_sf32               = 0x3D,
    OP_sf64               = 0x3E,
    OP_newfunction        = 0x40,
    OP_call               = 0x41,
    OP_construct          = 0x42,
    OP_callmethod         = 0x43,
    OP_callstatic         = 0x44,
    OP_callsuper          = 0x45,
    OP_callproperty       = 0x46,
    OP_returnvoid         = 0x47,
    OP_returnvalue        = 0x48,
    OP_constructsuper     = 0x49,
    OP_constructprop      = 0x4A,
    OP_callsuperid        = 0x4B,
    OP_callproplex        = 0x4C,
    OP_callinterface      = 0x4D,
    OP_callsupervoid      = 0x4E,
    OP_callpropvoid       = 0x4F,
    OP_sxi1               = 0x50,
    OP_sxi8               = 0x51,
    OP_sxi16              = 0x52,
    OP_applytype          = 0x53,
    OP_newobject          = 0x55,
    OP_newarray           = 0x56,
    OP_newactivation      = 0x57,
    OP_newclass           = 0x58,
    OP_getdescendants     = 0x59,
    OP_newcatch           = 0x5A,
    OP_deldescendants     = 0x5B,
    OP_findpropstrict     = 0x5D,
    OP_findproperty       = 0x5E,
    OP_finddef            = 0x5F,
    OP_getlex             = 0x60,
    OP_setproperty        = 0x61,
    OP_getlocal           = 0x62,
    OP_setlocal           = 0x63,
    OP_getglobalscope     = 0x64,
    OP_getscopeobject     = 0x65,
    OP_getproperty        = 0x66,
    OP_getpropertylate    = 0x67,
    OP_initproperty       = 0x68,
    OP_setpropertylate    = 0x69,
    OP_deleteproperty     = 0x6A,
    OP_deletepropertylate = 0x6B,
    OP_getslot            = 0x6C,
    OP_setslot            = 0x6D,
    OP_getglobalslot      = 0x6E,
    OP_setglobalslot      = 0x6F,
    OP_convert_s          = 0x70,
    OP_esc_xelem          = 0x71,
    OP_esc_xattr          = 0x72,
    OP_convert_i          = 0x73,
    OP_convert_u          = 0x74,
    OP_convert_d          = 0x75,
    OP_convert_b          = 0x76,
    OP_convert_o          = 0x77,
    OP_checkfilter        = 0x78,
    OP_convert_m          = 0x79,
    OP_convert_m_p        = 0x7A,
    OP_coerce             = 0x80,
    OP_coerce_b           = 0x81,
    OP_coerce_a           = 0x82,
    OP_coerce_i           = 0x83,
    OP_coerce_d           = 0x84,
    OP_coerce_s           = 0x85,
    OP_astype             = 0x86,
    OP_astypelate         = 0x87,
    OP_coerce_u           = 0x88,
    OP_coerce_o           = 0x89,
    OP_negate_p           = 0x8F,
    OP_negate             = 0x90,
    OP_increment          = 0x91,
    OP_inclocal           = 0x92,
    OP_decrement          = 0x93,
    OP_declocal           = 0x94,
    OP_typeof             = 0x95,
    OP_not                = 0x96,
    OP_bitnot             = 0x97,
    OP_concat             = 0x9A,
    OP_add_d              = 0x9B,
    OP_increment_p        = 0x9C,
    OP_inclocal_p         = 0x9D,
    OP_decrement_p        = 0x9E,
    OP_declocal_p         = 0x9F,
    OP_add                = 0xA0,
    OP_subtract           = 0xA1,
    OP_multiply           = 0xA2,
    OP_divide             = 0xA3,
    OP_modulo             = 0xA4,
    OP_lshift             = 0xA5,
    OP_rshift             = 0xA6,
    OP_urshift            = 0xA7,
    OP_bitand             = 0xA8,
    OP_bitor              = 0xA9,
    OP_bitxor             = 0xAA,
    OP_equals             = 0xAB,
    OP_strictequals       = 0xAC,
    OP_lessthan           = 0xAD,
    OP_lessequals         = 0xAE,
    OP_greaterthan        = 0xAF,
    OP_greaterequals      = 0xB0,
    OP_instanceof         = 0xB1,
    OP_istype             = 0xB2,
    OP_istypelate         = 0xB3,
    OP_in                 = 0xB4,
    OP_add_p              = 0xB5,
    OP_subtract_p         = 0xB6,
    OP_multiply_p         = 0xB7,
    OP_divide_p           = 0xB8,
    OP_modulo_p           = 0xB9,
    OP_increment_i        = 0xC0,
    OP_decrement_i        = 0xC1,
    OP_inclocal_i         = 0xC2,
    OP_declocal_i         = 0xC3,
    OP_negate_i           = 0xC4,
    OP_add_i              = 0xC5,
    OP_subtract_i         = 0xC6,
    OP_multiply_i         = 0xC7,
    OP_getlocal0          = 0xD0,
    OP_getlocal1          = 0xD1,
    OP_getlocal2          = 0xD2,
    OP_getlocal3          = 0xD3,
    OP_setlocal0          = 0xD4,
    OP_setlocal1          = 0xD5,
    OP_setlocal2          = 0xD6,
    OP_setlocal3          = 0xD7,
    OP_debug              = 0xEF,
    OP_debugline          = 0xF0,
    OP_debugfile          = 0xF1,
    OP_bkptline           = 0xF2,
    OP_timestamp          = 0xF3
};

constexpr inline std::array<std::pair<const char*, SmallTrivialVector<OPCodeArgumentType, 4>>, 256>
    OPCode_Info = {{
        /* 0x00 */ {"db", {OPCodeArgumentType::UByteLiteral}},
        /* 0x01 */ {"bkpt", {OPCodeArgumentType::Unknown}},
        /* 0x02 */ {"nop", {}},
        /* 0x03 */ {"throw", {}},
        /* 0x04 */ {"getsuper", {OPCodeArgumentType::Multiname}},
        /* 0x05 */ {"setsuper", {OPCodeArgumentType::Multiname}},
        /* 0x06 */ {"dxns", {OPCodeArgumentType::String}},
        /* 0x07 */ {"dxnslate", {}},
        /* 0x08 */ {"kill", {OPCodeArgumentType::UIntLiteral}},
        /* 0x09 */ {"label", {}},
        /* 0x0A */ {"0x0A", {OPCodeArgumentType::Unknown}},
        /* 0x0B */ {"0x0B", {OPCodeArgumentType::Unknown}},
        /* 0x0C */ {"ifnlt", {OPCodeArgumentType::JumpTarget}},
        /* 0x0D */ {"ifnle", {OPCodeArgumentType::JumpTarget}},
        /* 0x0E */ {"ifngt", {OPCodeArgumentType::JumpTarget}},
        /* 0x0F */ {"ifnge", {OPCodeArgumentType::JumpTarget}},
        /* 0x10 */ {"jump", {OPCodeArgumentType::JumpTarget}},
        /* 0x11 */ {"iftrue", {OPCodeArgumentType::JumpTarget}},
        /* 0x12 */ {"iffalse", {OPCodeArgumentType::JumpTarget}},
        /* 0x13 */ {"ifeq", {OPCodeArgumentType::JumpTarget}},
        /* 0x14 */ {"ifne", {OPCodeArgumentType::JumpTarget}},
        /* 0x15 */ {"iflt", {OPCodeArgumentType::JumpTarget}},
        /* 0x16 */ {"ifle", {OPCodeArgumentType::JumpTarget}},
        /* 0x17 */ {"ifgt", {OPCodeArgumentType::JumpTarget}},
        /* 0x18 */ {"ifge", {OPCodeArgumentType::JumpTarget}},
        /* 0x19 */ {"ifstricteq", {OPCodeArgumentType::JumpTarget}},
        /* 0x1A */ {"ifstrictne", {OPCodeArgumentType::JumpTarget}},
        /* 0x1B */
        {"lookupswitch",
            {OPCodeArgumentType::SwitchDefaultTarget, OPCodeArgumentType::SwitchTargets}},
        /* 0x1C */ {"pushwith", {}},
        /* 0x1D */ {"popscope", {}},
        /* 0x1E */ {"nextname", {}},
        /* 0x1F */ {"hasnext", {}},
        /* 0x20 */ {"pushnull", {}},
        /* 0x21 */ {"pushundefined", {}},
        /* 0x22 */ {"pushuninitialized", {OPCodeArgumentType::Unknown}},
        /* 0x23 */ {"nextvalue", {}},
        /* 0x24 */ {"pushbyte", {OPCodeArgumentType::ByteLiteral}},
        /* 0x25 */ {"pushshort", {OPCodeArgumentType::IntLiteral}},
        /* 0x26 */ {"pushtrue", {}},
        /* 0x27 */ {"pushfalse", {}},
        /* 0x28 */ {"pushnan", {}},
        /* 0x29 */ {"pop", {}},
        /* 0x2A */ {"dup", {}},
        /* 0x2B */ {"swap", {}},
        /* 0x2C */ {"pushstring", {OPCodeArgumentType::String}},
        /* 0x2D */ {"pushint", {OPCodeArgumentType::Int}},
        /* 0x2E */ {"pushuint", {OPCodeArgumentType::UInt}},
        /* 0x2F */ {"pushdouble", {OPCodeArgumentType::Double}},
        /* 0x30 */ {"pushscope", {}},
        /* 0x31 */ {"pushnamespace", {OPCodeArgumentType::Namespace}},
        /* 0x32 */
        {"hasnext2", {OPCodeArgumentType::UIntLiteral, OPCodeArgumentType::UIntLiteral}},
        /* 0x33 */ {"pushdecimal", {OPCodeArgumentType::Unknown}},
        /* 0x34 */ {"pushdnan", {OPCodeArgumentType::Unknown}},
        /* 0x35 */ {"li8", {}},
        /* 0x36 */ {"li16", {}},
        /* 0x37 */ {"li32", {}},
        /* 0x38 */ {"lf32", {}},
        /* 0x39 */ {"lf64", {}},
        /* 0x3A */ {"si8", {}},
        /* 0x3B */ {"si16", {}},
        /* 0x3C */ {"si32", {}},
        /* 0x3D */ {"sf32", {}},
        /* 0x3E */ {"sf64", {}},
        /* 0x3F */ {"0x3F", {OPCodeArgumentType::Unknown}},
        /* 0x40 */ {"newfunction", {OPCodeArgumentType::Method}},
        /* 0x41 */ {"call", {OPCodeArgumentType::UIntLiteral}},
        /* 0x42 */ {"construct", {OPCodeArgumentType::UIntLiteral}},
        /* 0x43 */
        {"callmethod", {OPCodeArgumentType::UIntLiteral, OPCodeArgumentType::UIntLiteral}},
        /* 0x44 */
        {"callstatic", {OPCodeArgumentType::Method, OPCodeArgumentType::UIntLiteral}},
        /* 0x45 */
        {"callsuper", {OPCodeArgumentType::Multiname, OPCodeArgumentType::UIntLiteral}},
        /* 0x46 */
        {"callproperty", {OPCodeArgumentType::Multiname, OPCodeArgumentType::UIntLiteral}},
        /* 0x47 */ {"returnvoid", {}},
        /* 0x48 */ {"returnvalue", {}},
        /* 0x49 */ {"constructsuper", {OPCodeArgumentType::UIntLiteral}},
        /* 0x4A */
        {"constructprop", {OPCodeArgumentType::Multiname, OPCodeArgumentType::UIntLiteral}},
        /* 0x4B */ {"callsuperid", {OPCodeArgumentType::Unknown}},
        /* 0x4C */
        {"callproplex", {OPCodeArgumentType::Multiname, OPCodeArgumentType::UIntLiteral}},
        /* 0x4D */ {"callinterface", {OPCodeArgumentType::Unknown}},
        /* 0x4E */
        {"callsupervoid", {OPCodeArgumentType::Multiname, OPCodeArgumentType::UIntLiteral}},
        /* 0x4F */
        {"callpropvoid", {OPCodeArgumentType::Multiname, OPCodeArgumentType::UIntLiteral}},
        /* 0x50 */ {"sxi1", {}},
        /* 0x51 */ {"sxi8", {}},
        /* 0x52 */ {"sxi16", {}},
        /* 0x53 */ {"applytype", {OPCodeArgumentType::UIntLiteral}},
        /* 0x54 */ {"0x54", {OPCodeArgumentType::Unknown}},
        /* 0x55 */ {"newobject", {OPCodeArgumentType::UIntLiteral}},
        /* 0x56 */ {"newarray", {OPCodeArgumentType::UIntLiteral}},
        /* 0x57 */ {"newactivation", {}},
        /* 0x58 */ {"newclass", {OPCodeArgumentType::Class}},
        /* 0x59 */ {"getdescendants", {OPCodeArgumentType::Multiname}},
        /* 0x5A */ {"newcatch", {OPCodeArgumentType::UIntLiteral}}, // ExceptionInfo index
        /* 0x5B */ {"deldescendants", {OPCodeArgumentType::Unknown}},
        /* 0x5C */ {"0x5C", {OPCodeArgumentType::Unknown}},
        /* 0x5D */ {"findpropstrict", {OPCodeArgumentType::Multiname}},
        /* 0x5E */ {"findproperty", {OPCodeArgumentType::Multiname}},
        /* 0x5F */ {"finddef", {OPCodeArgumentType::Multiname}},
        /* 0x60 */ {"getlex", {OPCodeArgumentType::Multiname}},
        /* 0x61 */ {"setproperty", {OPCodeArgumentType::Multiname}},
        /* 0x62 */ {"getlocal", {OPCodeArgumentType::UIntLiteral}},
        /* 0x63 */ {"setlocal", {OPCodeArgumentType::UIntLiteral}},
        /* 0x64 */ {"getglobalscope", {}},
        /* 0x65 */ {"getscopeobject", {OPCodeArgumentType::UByteLiteral}},
        /* 0x66 */ {"getproperty", {OPCodeArgumentType::Multiname}},
        /* 0x67 */ {"getpropertylate", {}},
        /* 0x68 */ {"initproperty", {OPCodeArgumentType::Multiname}},
        /* 0x69 */ {"setpropertylate", {}},
        /* 0x6A */ {"deleteproperty", {OPCodeArgumentType::Multiname}},
        /* 0x6B */ {"deletepropertylate", {}},
        /* 0x6C */ {"getslot", {OPCodeArgumentType::UIntLiteral}},
        /* 0x6D */ {"setslot", {OPCodeArgumentType::UIntLiteral}},
        /* 0x6E */ {"getglobalslot", {OPCodeArgumentType::UIntLiteral}},
        /* 0x6F */ {"setglobalslot", {OPCodeArgumentType::UIntLiteral}},
        /* 0x70 */ {"convert_s", {}},
        /* 0x71 */ {"esc_xelem", {}},
        /* 0x72 */ {"esc_xattr", {}},
        /* 0x73 */ {"convert_i", {}},
        /* 0x74 */ {"convert_u", {}},
        /* 0x75 */ {"convert_d", {}},
        /* 0x76 */ {"convert_b", {}},
        /* 0x77 */ {"convert_o", {}},
        /* 0x78 */ {"checkfilter", {}},
        /* 0x79 */ {"convert_m", {OPCodeArgumentType::Unknown}},
        /* 0x7A */ {"convert_m_p", {OPCodeArgumentType::Unknown}},
        /* 0x7B */ {"0x7B", {OPCodeArgumentType::Unknown}},
        /* 0x7C */ {"0x7C", {OPCodeArgumentType::Unknown}},
        /* 0x7D */ {"0x7D", {OPCodeArgumentType::Unknown}},
        /* 0x7E */ {"0x7E", {OPCodeArgumentType::Unknown}},
        /* 0x7F */ {"0x7F", {OPCodeArgumentType::Unknown}},
        /* 0x80 */ {"coerce", {OPCodeArgumentType::Multiname}},
        /* 0x81 */ {"coerce_b", {}},
        /* 0x82 */ {"coerce_a", {}},
        /* 0x83 */ {"coerce_i", {}},
        /* 0x84 */ {"coerce_d", {}},
        /* 0x85 */ {"coerce_s", {}},
        /* 0x86 */ {"astype", {OPCodeArgumentType::Multiname}},
        /* 0x87 */ {"astypelate", {}},
        /* 0x88 */ {"coerce_u", {OPCodeArgumentType::Unknown}},
        /* 0x89 */ {"coerce_o", {OPCodeArgumentType::Unknown}},
        /* 0x8A */ {"0x8A", {OPCodeArgumentType::Unknown}},
        /* 0x8B */ {"0x8B", {OPCodeArgumentType::Unknown}},
        /* 0x8C */ {"0x8C", {OPCodeArgumentType::Unknown}},
        /* 0x8D */ {"0x8D", {OPCodeArgumentType::Unknown}},
        /* 0x8E */ {"0x8E", {OPCodeArgumentType::Unknown}},
        /* 0x8F */ {"negate_p", {OPCodeArgumentType::Unknown}},
        /* 0x90 */ {"negate", {}},
        /* 0x91 */ {"increment", {}},
        /* 0x92 */ {"inclocal", {OPCodeArgumentType::UIntLiteral}},
        /* 0x93 */ {"decrement", {}},
        /* 0x94 */ {"declocal", {OPCodeArgumentType::UIntLiteral}},
        /* 0x95 */ {"typeof", {}},
        /* 0x96 */ {"not", {}},
        /* 0x97 */ {"bitnot", {}},
        /* 0x98 */ {"0x98", {OPCodeArgumentType::Unknown}},
        /* 0x99 */ {"0x99", {OPCodeArgumentType::Unknown}},
        /* 0x9A */ {"concat", {OPCodeArgumentType::Unknown}},
        /* 0x9B */ {"add_d", {OPCodeArgumentType::Unknown}},
        /* 0x9C */ {"increment_p", {OPCodeArgumentType::Unknown}},
        /* 0x9D */ {"inclocal_p", {OPCodeArgumentType::Unknown}},
        /* 0x9E */ {"decrement_p", {OPCodeArgumentType::Unknown}},
        /* 0x9F */ {"declocal_p", {OPCodeArgumentType::Unknown}},
        /* 0xA0 */ {"add", {}},
        /* 0xA1 */ {"subtract", {}},
        /* 0xA2 */ {"multiply", {}},
        /* 0xA3 */ {"divide", {}},
        /* 0xA4 */ {"modulo", {}},
        /* 0xA5 */ {"lshift", {}},
        /* 0xA6 */ {"rshift", {}},
        /* 0xA7 */ {"urshift", {}},
        /* 0xA8 */ {"bitand", {}},
        /* 0xA9 */ {"bitor", {}},
        /* 0xAA */ {"bitxor", {}},
        /* 0xAB */ {"equals", {}},
        /* 0xAC */ {"strictequals", {}},
        /* 0xAD */ {"lessthan", {}},
        /* 0xAE */ {"lessequals", {}},
        /* 0xAF */ {"greaterthan", {}},
        /* 0xB0 */ {"greaterequals", {}},
        /* 0xB1 */ {"instanceof", {}},
        /* 0xB2 */ {"istype", {OPCodeArgumentType::Multiname}},
        /* 0xB3 */ {"istypelate", {}},
        /* 0xB4 */ {"in", {}},
        /* 0xB5 */ {"add_p", {OPCodeArgumentType::Unknown}},
        /* 0xB6 */ {"subtract_p", {OPCodeArgumentType::Unknown}},
        /* 0xB7 */ {"multiply_p", {OPCodeArgumentType::Unknown}},
        /* 0xB8 */ {"divide_p", {OPCodeArgumentType::Unknown}},
        /* 0xB9 */ {"modulo_p", {OPCodeArgumentType::Unknown}},
        /* 0xBA */ {"0xBA", {OPCodeArgumentType::Unknown}},
        /* 0xBB */ {"0xBB", {OPCodeArgumentType::Unknown}},
        /* 0xBC */ {"0xBC", {OPCodeArgumentType::Unknown}},
        /* 0xBD */ {"0xBD", {OPCodeArgumentType::Unknown}},
        /* 0xBE */ {"0xBE", {OPCodeArgumentType::Unknown}},
        /* 0xBF */ {"0xBF", {OPCodeArgumentType::Unknown}},
        /* 0xC0 */ {"increment_i", {}},
        /* 0xC1 */ {"decrement_i", {}},
        /* 0xC2 */ {"inclocal_i", {OPCodeArgumentType::UIntLiteral}},
        /* 0xC3 */ {"declocal_i", {OPCodeArgumentType::UIntLiteral}},
        /* 0xC4 */ {"negate_i", {}},
        /* 0xC5 */ {"add_i", {}},
        /* 0xC6 */ {"subtract_i", {}},
        /* 0xC7 */ {"multiply_i", {}},
        /* 0xC8 */ {"0xC8", {OPCodeArgumentType::Unknown}},
        /* 0xC9 */ {"0xC9", {OPCodeArgumentType::Unknown}},
        /* 0xCA */ {"0xCA", {OPCodeArgumentType::Unknown}},
        /* 0xCB */ {"0xCB", {OPCodeArgumentType::Unknown}},
        /* 0xCC */ {"0xCC", {OPCodeArgumentType::Unknown}},
        /* 0xCD */ {"0xCD", {OPCodeArgumentType::Unknown}},
        /* 0xCE */ {"0xCE", {OPCodeArgumentType::Unknown}},
        /* 0xCF */ {"0xCF", {OPCodeArgumentType::Unknown}},
        /* 0xD0 */ {"getlocal0", {}},
        /* 0xD1 */ {"getlocal1", {}},
        /* 0xD2 */ {"getlocal2", {}},
        /* 0xD3 */ {"getlocal3", {}},
        /* 0xD4 */ {"setlocal0", {}},
        /* 0xD5 */ {"setlocal1", {}},
        /* 0xD6 */ {"setlocal2", {}},
        /* 0xD7 */ {"setlocal3", {}},
        /* 0xD8 */ {"0xD8", {OPCodeArgumentType::Unknown}},
        /* 0xD9 */ {"0xD9", {OPCodeArgumentType::Unknown}},
        /* 0xDA */ {"0xDA", {OPCodeArgumentType::Unknown}},
        /* 0xDB */ {"0xDB", {OPCodeArgumentType::Unknown}},
        /* 0xDC */ {"0xDC", {OPCodeArgumentType::Unknown}},
        /* 0xDD */ {"0xDD", {OPCodeArgumentType::Unknown}},
        /* 0xDE */ {"0xDE", {OPCodeArgumentType::Unknown}},
        /* 0xDF */ {"0xDF", {OPCodeArgumentType::Unknown}},
        /* 0xE0 */ {"0xE0", {OPCodeArgumentType::Unknown}},
        /* 0xE1 */ {"0xE1", {OPCodeArgumentType::Unknown}},
        /* 0xE2 */ {"0xE2", {OPCodeArgumentType::Unknown}},
        /* 0xE3 */ {"0xE3", {OPCodeArgumentType::Unknown}},
        /* 0xE4 */ {"0xE4", {OPCodeArgumentType::Unknown}},
        /* 0xE5 */ {"0xE5", {OPCodeArgumentType::Unknown}},
        /* 0xE6 */ {"0xE6", {OPCodeArgumentType::Unknown}},
        /* 0xE7 */ {"0xE7", {OPCodeArgumentType::Unknown}},
        /* 0xE8 */ {"0xE8", {OPCodeArgumentType::Unknown}},
        /* 0xE9 */ {"0xE9", {OPCodeArgumentType::Unknown}},
        /* 0xEA */ {"0xEA", {OPCodeArgumentType::Unknown}},
        /* 0xEB */ {"0xEB", {OPCodeArgumentType::Unknown}},
        /* 0xEC */ {"0xEC", {OPCodeArgumentType::Unknown}},
        /* 0xED */ {"0xED", {OPCodeArgumentType::Unknown}},
        /* 0xEE */ {"0xEE", {OPCodeArgumentType::Unknown}},
        /* 0xEF */
        {"debug", {OPCodeArgumentType::UByteLiteral, OPCodeArgumentType::String,
                      OPCodeArgumentType::UByteLiteral, OPCodeArgumentType::UIntLiteral}},
        /* 0xF0 */ {"debugline", {OPCodeArgumentType::UIntLiteral}},
        /* 0xF1 */ {"debugfile", {OPCodeArgumentType::String}},
        /* 0xF2 */ {"bkptline", {OPCodeArgumentType::Unknown}},
        /* 0xF3 */ {"timestamp", {OPCodeArgumentType::Unknown}},
        /* 0xF4 */ {"0xF4", {OPCodeArgumentType::Unknown}},
        /* 0xF5 */ {"0xF5", {OPCodeArgumentType::Unknown}},
        /* 0xF6 */ {"0xF6", {OPCodeArgumentType::Unknown}},
        /* 0xF7 */ {"0xF7", {OPCodeArgumentType::Unknown}},
        /* 0xF8 */ {"0xF8", {OPCodeArgumentType::Unknown}},
        /* 0xF9 */ {"0xF9", {OPCodeArgumentType::Unknown}},
        /* 0xFA */ {"0xFA", {OPCodeArgumentType::Unknown}},
        /* 0xFB */ {"0xFB", {OPCodeArgumentType::Unknown}},
        /* 0xFC */ {"0xFC", {OPCodeArgumentType::Unknown}},
        /* 0xFD */ {"0xFD", {OPCodeArgumentType::Unknown}},
        /* 0xFE */ {"0xFE", {OPCodeArgumentType::Unknown}},
        /* 0xFF */ {"0xFF", {OPCodeArgumentType::Unknown}},
    }};

constexpr inline BidirectionalMap OPCodeMap = std::invoke(
    []
    {
        std::array<std::pair<const char*, OPCode>, 256> entries{};
        for (size_t i = 0; i < 256; i++)
        {
            entries[i] = {OPCode_Info[i].first, OPCode(i)};
        }
        return BidirectionalMap(entries, cstringcomp(), std::equal_to<>());
    });
